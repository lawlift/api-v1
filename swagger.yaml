openapi: 3.0.0
info:
  description: |
    Welcome to the Lawlift API! You can use our API to access Lawlift API endpoints to export data from your system into Lawlift.
  version: "1.1.0"
  title: "Lawlift API"
  termsOfService: 'https://www.lawlift.com/privacy'
  contact:
    email: support@lawlift.com
servers:
  # Added by API Auto Mocking Plugin
  #- description: SwaggerHub API Auto Mocking
  #  url: https://virtserver.swaggerhub.com/sarasate/APIv1/1.0.0
  # Added by API Auto Mocking Plugin
  # - description: SwaggerHub API Auto Mocking
  #   url: https://virtserver.swaggerhub.com/sarasate/APIv1/1.0.0
  - url: 'https://app.lawlift.de/api/v1'
  # - url: 'http://localhost:3000/api/v1'
tags:
  - name: documents
    description: Generate a document in the Lawlift app with imported data
  - name: templates
    description: Endpoints for templates 
  - name: publications
    description: Endpoints for publications
paths:
  /publications/documents/generate:
    post:
      tags:
        - publications
      description: Generate a document for a publication
      responses:
        '200':
          description:
            Returns a link to a generated document based on a publication 
          content:
            application/json:
              schema:
                type: string
                example: 'https://app.lawlift.de/publications/document/YSHqK23Y7RGAtFHB6/yfoDmbuHp5TiQgEfb'
      requestBody:
        $ref: '#/components/requestBodies/PublicationDocument'
  /publications/{publicationId}:
    get:
      tags:
        - publications
      description: Get Publication by ID
      operationId: getPublicationById
      parameters:
        - name: publicationId
          in: path
          description: ID of the publication that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publication'
      security:
        - Bearer: []
  /publications:
    get:
      tags:
        - publications
      description: Get Publications
      responses:
        '200':
          description: OK
  /documents/generate:
    # description: "test"
    # summary: "Test"
    
      # This endpoint generates a new document with the provided data pre-filled and returns a url to the new document in Lawlift app.

      # ###Prerequisites
      # To populate imported data into an newly created document based on an existing templates a manual mapping of fields has to be provided for the template.

      # Enable the API Mapping in Lawlift and provide mapping fields for all the answers of a template.

      # Login to Lawlift
      # Go to 'Templates'
      # 'Edit' the template you want to map
      # Open 'Options'
      # At the bottom enable 'Api Mapping' and copy the API auth key.
      # At the left hand sidebar enter field names for all the answers you want to map to your export.
      # The mapping connects fields from the source system 1 to 1 with an answer of a document.
    post:
      tags:
        - documents
      summary: Generate document link
      operationId: generateDocument
      responses:
        '200':
          description:
            Returns a link to a generated document 
          content:
            application/json:
              schema:
                type: string
                example: 'https://app.lawlift.de/Contract/YSHqK23Y7RGAtFHB6/yfoDmbuHp5TiQgEfb'
        '405':
          description: Invalid input
      security:
        - Bearer: []
      requestBody:
        $ref: '#/components/requestBodies/Document'
  /templates:
    get:
      tags:
        - templates
      summary: Get list of active templates
      description: Returns a map of status codes to quantities
      operationId: getTemplates
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - Bearer: []

  '/templates/{templateId}':
    get:
      tags:
        - templates
      summary: Get data for a specific template
      description: >-
        Retrieve available fields for a template.
      operationId: getTemplateById
      parameters:
        - name: templateId
          in: path
          description: ID of template that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        '400':
          description: Invalid ID supplied
        '404':
          description: Template not found
security:
  - Bearer: []

components:
  schemas:
    Template:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        tags:
          type: array
          items:
            type: string
        description:
          type: string
        version:
          type: integer
        draftVersion:
          type: integer
        createdAt:
          type: string
        timesUsed:
          type: integer
        languages:
          type: object
          properties:
            original:
              type: string
            translated: 
              type: string
        documentsGenerated:
          type: integer
        fields:
          type: array
          items:
            type: string
            description: Mapped field name
    Publication:
      type: object
      properties:
        id:
          type: string  
        shortId:
          type: string
        templateId:
          type: string
        name:
          type: string
        status:
          type: object
          properties:
            publishedAt:
              type: string 
            published:
              type: boolean
        version:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string
        tags:
          type: array
          items:
            type: string
        fields:
          type: array
          items:
            type: string
  requestBodies:
    Data:
      content:
        application/json:
          schema:
            type: string
    Document:
      content:
        application/json:
          schema:
            type: object
            required:
              - templateId
              - data
            properties:
              templateId:
                type: string
                description: The Id of the template from which a document should be generated.
              data:
                type: object 
                description: "The data object with the mapped fields, can be serialized JSON or encrypted with tweet-nacl (Base64)."
                example: '{ "fieldName1": true, fieldName2: false, fieldName3: "First name" }'
              authorEmail:
                type: string
                description: Email of the author of the document.
              clientName:
                type: string
                description: The name of the client.
              caseName:
                type: string
                description: The name of the case.
              meta: 
                type: object
                description: "Custom meta data fields that will be exported into docx (settings.xml). Useful to insert data from your
system and extract it from exported docx files."
              nonce:
                type: string
                description: Only required if data payload is encrypted.
    PublicationDocument:
      content:
        application/json:
          schema:
            type: object
            required:
              - templateId
              - data
            properties:
              shortId:
                type: string
                description: The shortId of the publication from which a document should be generated.
              data:
                type: object 
                description: "The data object with the mapped fields, can be serialized JSON or encrypted with tweet-nacl (Base64)."
              authorEmail:
                type: string
                description: Email of the author of the document.
              clientName:
                type: string
                description: The name of the client.
              caseName:
                type: string
                description: The name of the case.
              meta: 
                type: object
                description: "Custom meta data fields that will be exported into docx (settings.xml). Useful to insert data from your
system and extract it from exported docx files."
              nonce:
                type: string
                description: Only required if data payload is encrypted.
      required: true
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header